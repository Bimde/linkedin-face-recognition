{"version":3,"sources":["FaceRec.js","UploadPic.js","Picture.js","DisplayImages.js","App.js","reportWebVitals.js","index.js"],"names":["loadInfo","a","fetch","headers","response","json","console","log","loadFaces","picId","setStatusLabel","setFaceMatch","faceMatcher","faceapi","withFaceLandmarks","withFaceDescriptor","singleResult","result","setTimeout","bestMatch","findBestMatch","descriptor","label","displayResult","linkedInInfo","FaceRec","useState","statusLabel","faceMatch","useEffect","name","headline","href","url","UploadPic","props","state","pictures","onDrop","bind","setPics","pictureFiles","pictureDataURLs","this","setState","concat","length","withIcon","buttonText","fileSizeError","fileTypeError","onChange","imgExtension","withPreview","maxFileSize","Component","Picture","id","is_test","display","path_override","pic_id","charAt","toUpperCase","slice","path","style","position","left","loading","src","alt","width","height","addReferenceImage","referenceImageId","withFaceDescriptors","linkedInPicFaces","buildFaceMatcher","setFaceMatcher","setModelsLoaded","ssdMobilenetv1","loadFromUri","faceRecognitionNet","faceLandmark68Net","referenceNames","labeledDescriptors","i","push","imgToImgSrc","imgFile","setPicSrc","img","DisplayImages","modelsLoaded","pics","picSrc","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb938a0e.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport * as faceapi from 'face-api.js';\n\nconst LINKEDIN_INFO_FILE = \"linkedin_data/info/info.json\"\n\nconst loadInfo = async () => {\n  var response = await fetch(LINKEDIN_INFO_FILE, {\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n  })\n  var json = await response.json()\n  console.log(json)\n  return json\n}\n\nconst loadFaces = async (picId, setStatusLabel, setFaceMatch, faceMatcher) => {\n  setStatusLabel('Comparing face')\n  // Load test pic and get descriptors\n  const singleResult = await faceapi\n    .detectSingleFace(picId)\n    .withFaceLandmarks()\n    .withFaceDescriptor()\n\n\n  var result = null;\n  setTimeout(function() {\n    // Compare descriptors\n    if (singleResult) {\n      const bestMatch = faceMatcher.findBestMatch(singleResult.descriptor)\n      console.log(bestMatch)\n      result = bestMatch.label\n    }\n    console.log(result)\n    setStatusLabel('Loading LinkedIn Info')\n  }, 1000);\n\n  const displayResult = async (result) => {\n    // Map result to a LinkedIn profile\n    if (result !== null && result !== 'unknown') {\n      var linkedInInfo = await loadInfo()\n      console.log('linkedin info')\n      setFaceMatch(linkedInInfo[result])\n      setStatusLabel('Face match complete!')\n    } else {\n      setStatusLabel('No match found')\n    }\n  }\n\n  setTimeout(function() {\n    displayResult(result)\n  }, 3000);\n}\n\nfunction FaceRec({ picId, faceMatcher }) {\n  const [statusLabel, setStatusLabel] = useState(\"\");\n  const [faceMatch, setFaceMatch] = useState(null);\n\n  useEffect(() => {\n    loadFaces(picId, setStatusLabel, setFaceMatch, faceMatcher)\n  }, [picId, faceMatcher]);\n\n  return (\n    <div>\n      <p>{!faceMatch && statusLabel}</p>\n      <p>{faceMatch && faceMatch.name}</p>\n      <p>{faceMatch && faceMatch.headline}</p>\n      <p>{faceMatch && <a href={faceMatch.url}>{faceMatch.url}</a>}</p>\n    </div>\n  );\n}\n\nexport default FaceRec;","import { Component } from \"react\";\nimport ImageUploader from \"react-images-upload\";\n\nclass UploadPic extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { pictures: [] };\n        this.onDrop = this.onDrop.bind(this);\n        this.setPics = props.setPics;\n      }\n    \n      onDrop(pictureFiles, pictureDataURLs) {\n        this.setState({\n          pictures: this.state.pictures.concat(pictureFiles)\n        });\n        if (pictureFiles.length === 0) {\n          this.setPics(null);\n        } else {\n          this.setPics(pictureFiles);\n        }\n        console.log(\"pics changed\");\n        console.log(pictureFiles);\n      }\n    \n      render() {\n        return (\n          <ImageUploader\n            withIcon={true}\n            buttonText=\"Upload Image\"\n            label=\"Max File Size: 5MB, Accepted File Types: jpg and png\"\n            fileSizeError=\": File uploaded is too BIG!\"\n            fileTypeError=\": File uploaded is not a supported file type. Please upload jpg or png only\"\n            onChange={this.onDrop}\n            imgExtension={[\".jpg\", \".png\", \".jpeg\"]}\n            withPreview={true}\n            maxFileSize={5242880}\n          />\n        );\n      }\n}\n\nexport default UploadPic;","// Expecting the props.name\nconst PATH = \"linkedin_data/pics/\"\nconst TEST_PATH = \"test_pics/\"\n\nvar Picture = ({id, is_test=false, display=false, path_override=null}) => {\n    const pic_id = id + (is_test ? \"_test_pic\" : \"_linkedin_pic\")\n    const name = id.charAt(0).toUpperCase() + id.slice(1)\n    const path = path_override ? path_override : ((is_test ? TEST_PATH : PATH) + id + \".jpeg\")\n    return (\n        <div style={(display ? {} : {position: \"absolute\", left: \"-999999px\", loading: \"lazy\"})}>\n            {name}<br></br>\n            <img id={pic_id} src={path} alt={pic_id} width=\"400px\" height=\"auto\"></img>\n        </div>\n    );\n}\n\nexport default Picture;","import { useEffect, useState } from 'react'\nimport FaceRec from './FaceRec';\nimport UploadPic from './UploadPic';\nimport Picture from './Picture'\nimport * as faceapi from 'face-api.js';\n\n// Detect face in a single image and return a LabeledFaceDescriptor\nconst addReferenceImage = async (name) => {\n  const referenceImageId = name + '_linkedin_pic'\n  const linkedInPicFaces = await faceapi\n    .detectAllFaces(referenceImageId)\n    .withFaceLandmarks()\n    .withFaceDescriptors()\n  return new faceapi.LabeledFaceDescriptors(\n    name,\n    [linkedInPicFaces[0].descriptor]\n  )\n}\n\nconst buildFaceMatcher = async (setStatusLabel, setFaceMatcher, setModelsLoaded) => {\n  // Load models\n  setStatusLabel('Loading models')\n  await faceapi.nets.ssdMobilenetv1.loadFromUri('models')\n  await faceapi.nets.faceRecognitionNet.loadFromUri('models')\n  await faceapi.nets.faceLandmark68Net.loadFromUri('models')\n\n  // Create face matcher using reference images\n  setStatusLabel('Creating descriptors')\n\n  const referenceNames = ['bimesh', 'jet', 'ellen', 'jazz', 'komal', 'ankita', 'umair', 'anandini', 'sumedha', 'devanshu']\n  const labeledDescriptors = []\n\n  for (var i = 0; i < referenceNames.length; i++) {\n    console.log(\"name: \" + referenceNames[i])\n    labeledDescriptors.push(await addReferenceImage(referenceNames[i]))\n  }\n  setFaceMatcher(new faceapi.FaceMatcher(labeledDescriptors))\n  setTimeout(function() {\n    setModelsLoaded(true)\n  }, 5000)\n}\n\nconst imgToImgSrc = async (imgFile, setPicSrc) => {\n  const img = await faceapi.bufferToImage(imgFile); \n  setPicSrc(img.src)\n}\n\nfunction DisplayImages(props) {\n  const [modelsLoaded, setModelsLoaded] = useState(false);\n  const [statusLabel, setStatusLabel] = useState(\"\");\n  const [faceMatcher, setFaceMatcher] = useState(null);\n  const [pics, setPics] = useState(null);\n  const [picSrc, setPicSrc] = useState(null);\n\n  useEffect(() => {\n    buildFaceMatcher(setStatusLabel, setFaceMatcher, setModelsLoaded);\n  }, []);\n\n  useEffect(() => {\n    if (!pics) {\n      setPicSrc(null);\n      return;\n    }\n    imgToImgSrc(pics[0], setPicSrc);\n    console.log(pics[0]);\n  }, [pics]);\n\n  return (\n    <div>\n      {picSrc && pics && <Picture id={pics[0].name} is_test={true} path_override={picSrc}/>}\n      <p>{!modelsLoaded && statusLabel}</p>\n      {modelsLoaded && <UploadPic setPics={setPics} />}\n      {picSrc && pics && <FaceRec picId={pics[0].name + \"_test_pic\"} is_test={true} faceMatcher={faceMatcher} />}\n      {/* modelsLoaded && <p>Test pictures:</p>}\n      {{modelsLoaded && <Picture id=\"bimesh\" is_test={true} display={true} />}\n      {modelsLoaded && <FaceRec picId=\"bimesh_test_pic\" faceMatcher={faceMatcher} />}\n      {modelsLoaded && <Picture id=\"jet\" is_test={true} display={true} />}\n      {modelsLoaded && <FaceRec picId=\"jet_test_pic\" faceMatcher={faceMatcher} />} */}\n\n      {/* Reference pictures */}\n      <Picture id=\"bimesh\" />\n      <Picture id=\"jet\" />\n      <Picture id=\"ellen\" />\n      <Picture id=\"jazz\" />\n      <Picture id=\"komal\" />\n      <Picture id=\"ankita\" />\n      <Picture id=\"umair\" />\n      <Picture id=\"anandini\" />\n      <Picture id=\"sumedha\" />\n      <Picture id=\"devanshu\" />\n    </div>\n  );\n}\n\nexport default DisplayImages;","import { Component } from 'react';\nimport './App.css';\nimport DisplayImages from './DisplayImages';\n\nclass App extends Component {\n  render() {\n  return (\n    <div className=\"App\">\n      <DisplayImages/>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}