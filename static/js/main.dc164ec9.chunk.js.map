{"version":3,"sources":["FaceRec.js","App.js","reportWebVitals.js","index.js"],"names":["loadFaces","picId","setFaceMatchLabel","a","faceapi","ssdMobilenetv1","loadFromUri","faceRecognitionNet","faceLandmark68Net","withFaceLandmarks","withFaceDescriptors","bimeshLinkedInPic","labeledDescriptors","descriptor","faceMatcher","withFaceDescriptor","singleResult","bestMatch","findBestMatch","console","log","result","toString","FaceRec","useState","faceMatch","setFaceMatch","useEffect","App","className","id","src","alt","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wUAGMA,EAAS,uCAAG,WAAOC,EAAOC,GAAd,yBAAAC,EAAA,6DAEhBD,EAAkB,kBAFF,SAGVE,IAAaC,eAAeC,YAAY,UAH9B,uBAIVF,IAAaG,mBAAmBD,YAAY,UAJlC,uBAKVF,IAAaI,kBAAkBF,YAAY,UALjC,cAShBJ,EAAkB,wBAEK,sBAXP,UAYgBE,IADT,uBAGpBK,oBACAC,sBAfa,eAYVC,EAZU,OAiBVC,EAAqB,CACzB,IAAIR,IACF,SACA,CAACO,EAAkB,GAAGE,cAGpBC,EAAc,IAAIV,IAAoBQ,GAvB5B,UA0BWR,IACPH,GACjBQ,oBACAM,qBA7Ba,QA0BVC,EA1BU,OA+BhBd,EAAkB,2BAIdc,GACIC,EAAYH,EAAYI,cAAcF,EAAaH,YACzDM,QAAQC,IAAIH,GACZI,EAAS,iCAAmCJ,EAAUK,YAEtDD,EAAS,iBAGXF,QAAQC,IAAIC,GACZnB,EAAkBmB,GA5CF,4CAAH,wDA8DAE,MAdf,YAA6B,IAAVtB,EAAS,EAATA,MACjB,EAAkCuB,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAMA,OAJAC,qBAAU,WACR3B,EAAUC,EAAOyB,KAChB,CAACzB,IAGF,8BACE,4BAAIwB,OCrCKG,MAnBf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,oDADF,SAIQ,uBACN,qBAAKC,GAAG,sBAAsBC,IAAI,iCAAiCC,IAAI,sBAAsBC,MAAM,QAAQC,OAAO,SAAa,uBAC/H,+CAGA,qBAAKJ,GAAG,kBAAkBC,IAAI,uBAAuBC,IAAI,kBAAkBC,MAAM,QAAQC,OAAO,SAChG,cAAC,EAAD,CAASjC,MAAM,oBACf,qBAAK6B,GAAG,eAAeC,IAAI,oBAAoBC,IAAI,kBAAkBC,MAAM,QAAQC,OAAO,SAC1F,cAAC,EAAD,CAASjC,MAAM,qBCNNkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dc164ec9.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport * as faceapi from 'face-api.js';\n\nconst loadFaces = async (picId, setFaceMatchLabel) => {\n  // Load models\n  setFaceMatchLabel('Loading models')\n  await faceapi.nets.ssdMobilenetv1.loadFromUri('models')\n  await faceapi.nets.faceRecognitionNet.loadFromUri('models')\n  await faceapi.nets.faceLandmark68Net.loadFromUri('models')\n\n\n  // Create face matcher using reference image\n  setFaceMatchLabel('Creating descriptors')\n\n  const referenceImage = 'bimesh_linkedin_pic'\n  const bimeshLinkedInPic = await faceapi\n    .detectAllFaces(referenceImage)\n    .withFaceLandmarks()\n    .withFaceDescriptors()\n\n  const labeledDescriptors = [\n    new faceapi.LabeledFaceDescriptors(\n      'Bimesh',\n      [bimeshLinkedInPic[0].descriptor]\n    )\n  ]\n  const faceMatcher = new faceapi.FaceMatcher(labeledDescriptors)\n\n  // Load test pic and get descriptors\n  const singleResult = await faceapi\n    .detectSingleFace(picId)\n    .withFaceLandmarks()\n    .withFaceDescriptor()\n\n  setFaceMatchLabel('Creating descriptors...')\n\n  // Compare descriptors\n  var result;\n  if (singleResult) {\n    const bestMatch = faceMatcher.findBestMatch(singleResult.descriptor)\n    console.log(bestMatch)\n    result = \"^ Detected person (distance): \" + bestMatch.toString()\n  } else {\n    result = \"No match found\"\n  }\n\n  console.log(result)\n  setFaceMatchLabel(result)\n\n}\n\nfunction FaceRec({ picId }) {\n  const [faceMatch, setFaceMatch] = useState(\"\");\n\n  useEffect(() => {\n    loadFaces(picId, setFaceMatch)\n  }, [picId]);\n\n  return (\n    <div>\n      <p>{faceMatch}</p>\n    </div>\n  );\n}\n\nexport default FaceRec;","import './App.css';\nimport FaceRec from './FaceRec'\n// import {useState} from 'react'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <p>\n        Reference pictures:\n      </p>\n      Bimesh<br />\n      <img id=\"bimesh_linkedin_pic\" src=\"linkedin_data/pics/bimesh.jpeg\" alt=\"bimesh_linkedin_pic\" width=\"400px\" height=\"auto\"></img><br />\n      <p>\n        Test pictures:\n      </p>\n      <img id=\"bimesh_test_pic\" src=\"test_pics/bimesh.jpg\" alt=\"bimesh_test_pic\" width=\"400px\" height=\"auto\"></img>\n      <FaceRec picId=\"bimesh_test_pic\" />\n      <img id=\"jet_test_pic\" src=\"test_pics/jet.jpg\" alt=\"bimesh_test_pic\" width=\"400px\" height=\"auto\"></img>\n      <FaceRec picId=\"jet_test_pic\" />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}