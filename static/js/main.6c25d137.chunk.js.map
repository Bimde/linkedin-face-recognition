{"version":3,"sources":["FaceRec.js","App.js","reportWebVitals.js","index.js"],"names":["addReferenceImage","name","a","referenceImageId","faceapi","withFaceLandmarks","withFaceDescriptors","linkedInPicFaces","descriptor","loadInfo","fetch","headers","response","json","console","log","loadFaces","picId","setStatusLabel","setFaceMatch","ssdMobilenetv1","loadFromUri","faceRecognitionNet","faceLandmark68Net","referenceNames","labeledDescriptors","i","length","push","faceMatcher","withFaceDescriptor","singleResult","result","bestMatch","findBestMatch","label","linkedInInfo","FaceRec","useState","statusLabel","faceMatch","useEffect","headline","href","url","App","className","id","src","alt","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c25d137.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport * as faceapi from 'face-api.js';\n\nconst LINKEDIN_INFO_FILE = \"linkedin_data/info/info.json\"\n\n// Detect face in a single image and return a LabeledFaceDescriptor\nconst addReferenceImage = async (name) => {\n  const referenceImageId = name + '_linkedin_pic'\n  const linkedInPicFaces = await faceapi\n    .detectAllFaces(referenceImageId)\n    .withFaceLandmarks()\n    .withFaceDescriptors()\n  return new faceapi.LabeledFaceDescriptors(\n    name,\n    [linkedInPicFaces[0].descriptor]\n  )\n}\n\nconst loadInfo = async () => {\n  var response = await fetch(LINKEDIN_INFO_FILE, {\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n  })\n  var json = await response.json()\n  console.log(json)\n  return json\n}\n\nconst loadFaces = async (picId, setStatusLabel, setFaceMatch) => {\n  // Load models\n  setStatusLabel('Loading models')\n  await faceapi.nets.ssdMobilenetv1.loadFromUri('models')\n  await faceapi.nets.faceRecognitionNet.loadFromUri('models')\n  await faceapi.nets.faceLandmark68Net.loadFromUri('models')\n\n  // Create face matcher using reference images\n  setStatusLabel('Creating descriptors')\n\n  const referenceNames = ['bimesh', 'jet', 'ellen', 'jazz']\n  const labeledDescriptors = []\n\n  for (var i = 0; i < referenceNames.length; i++) {\n    console.log(\"name: \" + referenceNames[i])\n    labeledDescriptors.push(await addReferenceImage(referenceNames[i]))\n  }\n  const faceMatcher = new faceapi.FaceMatcher(labeledDescriptors)\n\n  // Load test pic and get descriptors\n  const singleResult = await faceapi\n    .detectSingleFace(picId)\n    .withFaceLandmarks()\n    .withFaceDescriptor()\n\n    setStatusLabel('Creating descriptors...')\n\n  // Compare descriptors\n  var result = null;\n  if (singleResult) {\n    const bestMatch = faceMatcher.findBestMatch(singleResult.descriptor)\n    console.log(bestMatch)\n    result = bestMatch.label\n  }\n\n  console.log(result)\n  if (result !== null && result !== 'unknown') {\n    var linkedInInfo = await loadInfo()\n    console.log('linkedin info')\n    setFaceMatch(linkedInInfo[result])\n    setStatusLabel('Face match complete!')\n  } else {\n    setStatusLabel('No match found')\n  }\n}\n\nfunction FaceRec({ picId }) {\n  const [statusLabel, setStatusLabel] = useState(\"\");\n  const [faceMatch, setFaceMatch] = useState(null);\n\n  useEffect(() => {\n    loadFaces(picId, setStatusLabel, setFaceMatch)\n  }, [picId]);\n\n  return (\n    <div>\n      <p>{!faceMatch && statusLabel}</p>\n      <p>{faceMatch && faceMatch.name}</p>\n      <p>{faceMatch && faceMatch.headline}</p>\n      <p>{faceMatch && <a href={faceMatch.url}>{faceMatch.url}</a>}</p>\n    </div>\n  );\n}\n\nexport default FaceRec;","import './App.css';\nimport FaceRec from './FaceRec'\n// import {useState} from 'react'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <p>\n        Reference pictures:\n      </p>\n      <div>\n      Bimesh<br />\n      <img id=\"bimesh_linkedin_pic\" src=\"linkedin_data/pics/bimesh.jpeg\" alt=\"bimesh_linkedin_pic\" width=\"400px\" height=\"auto\"></img><br />\n      </div>\n      <div>\n      Jet<br />\n      <img id=\"jet_linkedin_pic\" src=\"linkedin_data/pics/jet.jpeg\" alt=\"jet_linkedin_pic\" width=\"400px\" height=\"auto\"></img><br />\n      </div>\n      Ellen<br />\n      <img id=\"ellen_linkedin_pic\" src=\"linkedin_data/pics/ellen.jpeg\" alt=\"ellen_linkedin_pic\" width=\"400px\" height=\"auto\"></img><br />\n      <div>Jazz<br />\n      <img id=\"jazz_linkedin_pic\" src=\"linkedin_data/pics/jazz.jpeg\" alt=\"jazz_linkedin_pic\" width=\"400px\" height=\"auto\"></img><br />\n      </div>\n      <p>\n        Test pictures:\n      </p>\n      <img id=\"bimesh_test_pic\" src=\"test_pics/bimesh.jpg\" alt=\"bimesh_test_pic\" width=\"400px\" height=\"auto\"></img>\n      <FaceRec picId=\"bimesh_test_pic\" />\n      <img id=\"jet_test_pic\" src=\"test_pics/jet.jpg\" alt=\"bimesh_test_pic\" width=\"400px\" height=\"auto\"></img>\n      <FaceRec picId=\"jet_test_pic\" />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}